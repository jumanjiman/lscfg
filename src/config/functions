#!/bin/bash

### This software may be freely redistributed under the terms of the GNU
### public license.

# user may call lscfg via sudo
export PATH="${PATH}:/sbin"

# read config
config=/etc/lscfg/lscfg.conf
[ -r $config ] && . $config || exit 1

### functions

default_runlevel() {
  awk -F: '/^id:/{print $2}' /etc/inittab
  return $?
}

# one-dimensional array with asciidoc heading markers
headings=("=" "==" "===" "====" "=====")

heading() {
  # inputs
  desired_level=$1
  text=$2

  # sanity-check base_level
  [ $base_level -ge 0 ] || base_level=0

  # compute actual_level
  actual_level=$(( $desired_level + $base_level ))

  # sanity-check
  [ $actual_level -ge 0 ] || actual_level=0
  [ $actual_level -le 4 ] || actual_level=4

  # formatted output
  echo
  echo
  echo -n ${headings[$actual_level]}
  echo -n " $2 "
  echo -n ${headings[$actual_level]}
  echo
  echo
}

show_header() {
  # docinfo section
  heading 0 "$(hostname)"
  echo $_title
  echo $author
  echo "${revdate}:${revremark}"
  echo

  # introduction
  heading 1 "Introduction"
  cat << "EOF"
This document was created with `lscfg` on a host machine.

The `lscfg` command runs numerous checkpoints at `nice -n +19`
to reduce impact on the host. It dumps 
http://www.methods.co.nz/asciidoc[AsciiDoc]-formatted
output to `stdout`, which can be redirected as desired.
The underlying code for each checkpoint is provided in
the last section of this document.

The http://www.methods.co.nz[AsciiDoc] output can be copied 
from the original host to another workstation
and rendered in other formats.

.Convert to HTML:
----
asciidoc -b html4 /tmp/lscfg.asciidoc
----

.Convert to PDF:
----
a2x -vv -f pdf /tmp/lscfg.asciidoc
----

AsciiDoc is written in Python and is available on many platforms.
On Linux, the *asciidoc* package provides the `asciidoc` and `a2x` commands.

EOF
}

show_checkpoints() {
  # this creates an appendix as part of the document
  heading 1 Checkpoints
cat << "EOF"

This section provides code listings for each checkpoint
used to produce the output in other sections.

EOF
  for file in $(ls /usr/share/lscfg/*); do
    _pretty_file=${file##*lscfg/}
    heading 2 "Checkpoint: $_pretty_file"
    echo "----"
    cat $file
    echo "----"
  done
}

do_checkpoint() {
  _rc=0
  _file=$checkpoints_dir/$1
  [[ -r $_file ]] || return 1

  # description of checkpoints should be it tech appendix
  #echo
  #echo "Checkpoint:"
  #echo
  #echo "----"
  #cat $_file
  #echo "----"

  # show invocation
  _fake_cmd="$@"
  echo
  echo "Checkpoint: $_fake_cmd"

  # show output
  if [[ $# -gt 1 ]]; then
    _cmd="$_file $@"
  else
    _cmd="$_file"
  fi
  echo
  echo "----"
  {
  nice -n +19 bash $_cmd
  # capture the return code
  _rc=$?
  echo
  echo "Return code: $_rc"
  # then clean up the output
  } | tr -d '\033' | sed 's/^----/ ----/'

  # guarantee a non-empty code block
  #echo 
  echo "----"

  # show warning if bad exit status
  #echo
  #if [ $_rc -ne 0 ]; then
    #echo "WARNING: The checkpoint exit status was $_rc"
  #fi
  return $_rc
}


services () {

cat << EOF

+=======================+
|| :: SERVICES INFO :: ||
+=======================+

 Services "On Boot"	:

$SVC
EOF
}

version () {

cat << EOF

lscfg version $version

EOF
}
