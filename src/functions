#!/bin/bash

### This software may be freely redistributed under the terms of the GNU
### public license.

# user may call lscfg via sudo
export PATH="${PATH}:/sbin"


#####################################################
### feel free to mod this as necessary for your needs
### comments & suggestions are welcome..
### flaming is not encouraged...
### email jbenedic@redhat.com
#####################################################


### functions

default_runlevel() {
  awk -F: '/^id:/{print $2}' /etc/inittab
  return $?
}

# one-dimensional array with asciidoc heading markers
headings=("=" "==" "===" "====" "=====")

# 0 for book
base_level=0

# 1 for chapter (as part of a book) or article
#base_level=1

author="root"
authorinitials="root"
revremark="ran lscfg -a"
# revdate must not contain a ":"
revdate="$(date +'%Y %b %d at %H%M.%S')"

checkpoints_dir=checkpoints

show_header() {
  # begin a document
  _title="${headings[$base_level]} $(hostname) ${headings[$base_level]}"
  echo $_title
  echo $author
  echo "${revdate}:${revremark}"
  echo
}

heading() {
  # inputs
  desired_level=$1
  text=$2

  # sanity-check base_level
  [ $base_level -ge 0 ] || base_level=0

  # compute actual_level
  actual_level=$(( $desired_level + $base_level ))

  # sanity-check
  [ $actual_level -ge 0 ] || actual_level=0
  [ $actual_level -le 4 ] || actual_level=4

  # formatted output
  echo
  echo
  echo -n ${headings[$actual_level]}
  echo -n " $2 "
  echo -n ${headings[$actual_level]}
  echo
  echo
}

do_checkpoint() {
  _file=$checkpoints_dir/$1
  [[ -r $_file ]] || return 1

  # description of checkpoints should be it tech appendix
  #echo
  #echo "Checkpoint:"
  #echo
  #echo "----"
  #cat $_file
  #echo "----"

  # show invocation
  _fake_cmd="$@"
  echo
  echo "Checkpoint: $_fake_cmd"

  # show output
  if [[ $# -gt 1 ]]; then
    _cmd="$_file $@"
  else
    _cmd="$_file"
  fi
  echo
  echo "----"
  nice -n +19 bash $_cmd | tr -d '\033'
  _rc=$?
  # guarantee a non-empty code block
  echo 
  echo "----"

  # show warning if bad exit status
  echo
  if [ $_rc -ne 0 ]; then
    echo "WARNING: The checkpoint exit status was $_rc"
  fi
  return $_rc
}


services () {

cat << EOF

+=======================+
|| :: SERVICES INFO :: ||
+=======================+

 Services "On Boot"	:

$SVC
EOF
}

version () {

cat << EOF

lscfg version $version

EOF
}
